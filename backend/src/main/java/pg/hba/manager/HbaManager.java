package pg.hba.manager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import pg.hba.entity.HbaRule;
import pg.hba.mapper.HbaRuleMapper;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
public class HbaManager {

    @Value("${hba.conf.path:/var/lib/pgsql-16/data/pg_hba.conf}")
    private String hbaConfigPath;


    @Autowired
    private HbaRuleMapper hbaRuleMapper;


    public void applyRulesToConfig() throws Exception {
        List<HbaRule> rules = hbaRuleMapper.findAllActiveRules();

        // 创建备份
        backupConfigFile();

        // 生成新的配置文件内容
        StringBuilder content = new StringBuilder();
        content.append("# PostgreSQL Client Authentication Configuration File\n");
        content.append("# Generated by pg-hba-manager at ")
                .append(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
                .append("\n\n");

        for (HbaRule rule : rules) {
            content.append(rule.toString()).append("\n");
        }

        // 写入文件
        Files.write(Paths.get(hbaConfigPath), content.toString().getBytes());

        System.out.println("Successfully applied " + rules.size() + " rules to pg_hba.conf");
    }

    public void backupConfigFile() throws IOException {
        String backupPath = hbaConfigPath + ".backup." +
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));
        Files.copy(Paths.get(hbaConfigPath), Paths.get(backupPath),
                StandardCopyOption.REPLACE_EXISTING);
        System.out.println("Backup created: " + backupPath);
    }

    public void reloadPostGreSQL() throws IOException, InterruptedException {
        // 这里可以根据实际环境调整PostgreSQL重载命令
        ProcessBuilder pb = new ProcessBuilder("pg_ctl", "reload", "-D",
                System.getenv("PGDATA"));
        Process process = pb.start();
        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new RuntimeException("Failed to reload PostgreSQL configuration");
        }
        System.out.println("PostgreSQL configuration reloaded successfully");
    }


}
