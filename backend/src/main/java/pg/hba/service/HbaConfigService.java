package pg.hba.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import pg.hba.config.BusinessException;
import pg.hba.entity.HbaRule;
import pg.hba.vo.*;

import javax.servlet.http.HttpServletRequest;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@Slf4j
public class HbaConfigService {


    @Value("${pg.hba.config.path:/etc/postgresql/pg_hba.conf}")
    private String pgHbaConfigPath;

    @Value("${pg.hba.backup.enabled:true}")
    private boolean backupEnabled;

    @Value("${pg.hba.env.pg-data:/var/lib/postgresql/data}")
    private String pgDataPath;


    @Autowired
    private DatabaseConnectionService databaseConnectionService;


    @Autowired
    private AuditLogService auditLogService;


    @Autowired
    private ConfigOperationLogService configOperationLogService;


    public String getConfiguredPgHbaPath() {
        return pgHbaConfigPath;
    }

    /**
     * 将数据库中的活跃规则同步到pg_hba.conf文件
     */
    public SyncResult syncRulesToConfig(List<HbaRule> activeRules, HttpServletRequest servletRequest) {
        long startTime = System.currentTimeMillis();
        String userName = ""; // 获取当前用户
        SyncResult result = new SyncResult();

        try {
            // 创建备份
            if (backupEnabled) {
                backupConfigFile();
            }

            // 生成新的配置内容
            String newConfigContent = generateConfigContent(activeRules);

            // 写入配置文件
            writeConfigFile(newConfigContent);

            result.setSuccess(true);
            result.setMessage("Successfully synced " + activeRules.size() + " rules to pg_hba.conf");
            result.setRuleCount(activeRules.size());

            log.info("Successfully synced {} rules to pg_hba.conf", activeRules.size());

        } catch (Exception e) {
            result.setSuccess(false);
            result.setMessage("Failed to sync rules to pg_hba.conf: " + e.getMessage());
            log.error("Failed to sync rules to pg_hba.conf: {}", e.getMessage(), e);
        } finally {
            long duration = System.currentTimeMillis() - startTime;
            // 记录操作日志
            configOperationLogService.logOperation("SYNC_CONFIG", userName, result.isSuccess() ? "SUCCESS" : "FAILED", result.getMessage(), result, duration, servletRequest);
        }
        return result;
    }

    /**
     * 生成pg_hba.conf配置文件内容
     */
    private String generateConfigContent(List<HbaRule> activeRules) {
        StringBuilder content = new StringBuilder();
        // 添加文件头注释
        content.append("# pg_hba.conf - Generated by PgHBA Manager\n");
        content.append("# Generated at: ").append(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).append("\n");
        content.append("# Total rules: ").append(activeRules.size()).append("\n\n");
        // 添加标准连接规则
        content.append("# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n");
        // 添加数据库规则
        for (HbaRule rule : activeRules) {
            if (Boolean.TRUE.equals(rule.getActive())) {
                content.append(formatRule(rule)).append("\n");
            }
        }
        // 添加默认拒绝规则（可选）
        content.append("\n# Default deny rule\n");
        content.append("host    all             all             0.0.0.0/0               reject\n");
        return content.toString();
    }

    /**
     * 格式化单条规则
     */
    private String formatRule(HbaRule rule) {
        StringBuilder formattedRule = new StringBuilder();
        // 连接类型
        formattedRule.append(String.format("%-8s", rule.getConnectionType()));
        // 数据库
        formattedRule.append(String.format("%-16s", rule.getDatabaseName()));
        // 用户
        formattedRule.append(String.format("%-16s", rule.getUserName()));
        // 地址（local连接类型不需要地址）
        if ("local".equals(rule.getConnectionType())) {
            formattedRule.append(String.format("%-24s", ""));
        } else {
            formattedRule.append(String.format("%-24s", rule.getAddress() != null ? rule.getAddress() : ""));
        }
        // 认证方法
        formattedRule.append(rule.getAuthMethod());
        // 注释
        if (rule.getComment() != null && !rule.getComment().trim().isEmpty()) {
            formattedRule.append("  # ").append(rule.getComment().trim());
        }
        return formattedRule.toString();
    }

    /**
     * 写入配置文件
     */
    private void writeConfigFile(String content) throws IOException {
        Path configPath = Paths.get(pgHbaConfigPath);
        // 确保父目录存在
        Files.createDirectories(configPath.getParent());
        // 写入临时文件
        Path tempPath = Files.createTempFile("pg_hba", ".conf");
        try (BufferedWriter writer = Files.newBufferedWriter(tempPath)) {
            writer.write(content);
        }
        // 原子性地替换原文件
        Files.move(tempPath, configPath, StandardCopyOption.REPLACE_EXISTING);
        log.info("Successfully wrote pg_hba.conf to: {}", configPath);
    }

    /**
     * 备份当前配置文件
     */
    private void backupConfigFile() throws IOException {
        Path configPath = Paths.get(pgHbaConfigPath);
        if (Files.exists(configPath)) {
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
            Path backupPath = configPath.getParent().resolve("pg_hba.conf.backup." + timestamp);
            Files.copy(configPath, backupPath, StandardCopyOption.COPY_ATTRIBUTES);
            log.info("Backup created: {}", backupPath);
        }
    }

    /**
     * 重新加载PostGreSQL配置（需要适当的权限）
     */
    public ReloadResult reloadPostGreSQLConfig(HttpServletRequest servletRequest) {
        long startTime = System.currentTimeMillis();
        String userName = ""; // 获取当前用户
        ReloadResult result = new ReloadResult();
        try {
            log.info("Attempting to reload PostGreSQL configuration...");
            // 方法1: 使用pg_ctl reload
            log.info("Trying pg_ctl reload...");
            if (tryPgCtlReload(result)) {
                result.setSuccess(true);
                result.setMessage("Configuration reloaded successfully using pg_ctl");
                log.info(result.getMessage());
                return result;
            }
            // 方法2: 使用SQL命令
            log.info("pg_ctl failed, trying SQL-based reload...");
            if (trySqlReload(result)) {
                result.setSuccess(true);
                result.setMessage("Configuration reloaded successfully using SQL");
                log.info(result.getMessage());
                return result;
            }
            // 如果两种方法都失败
            result.setSuccess(false);
            result.setMessage("Failed to reload configuration using both pg_ctl and SQL methods");
            log.error(result.getMessage());
        } catch (Exception e) {
            log.error("Failed to reload PostgreSQL configuration: {}", e.getMessage(), e);
            throw new BusinessException("Failed to reload PostgreSQL configuration: " + e.getMessage(), e);
        } finally {
            long duration = System.currentTimeMillis() - startTime;
            // 记录操作日志
            configOperationLogService.logOperation("RELOAD_CONFIG", userName, result.isSuccess() ? "SUCCESS" : "FAILED", result.getMessage(), result, duration, servletRequest);
        }
        return result;
    }


    /**
     * 尝试使用pg_ctl重载配置
     */
    private boolean tryPgCtlReload(ReloadResult result) {
        try {
            ProcessBuilder pb = new ProcessBuilder("pg_ctl", "reload", "-D", getPostgresDataDirectory());
            pb.redirectErrorStream(true);
            Process process = pb.start();
            int exitCode = process.waitFor();
            // 读取输出
            StringBuilder output = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    output.append(line).append("\n");
                }
            }
            result.setMethodUsed("pg_ctl");
            result.setOutput(output.toString().trim());
            if (exitCode == 0) {
                log.debug("pg_ctl reload output: {}", output.toString().trim());
                return true;
            } else {
                log.warn("pg_ctl reload failed with exit code {}: {}", exitCode, output.toString().trim());
                return false;
            }
        } catch (Exception e) {
            log.warn("pg_ctl reload failed: {}", e.getMessage(), e);
            result.setMethodUsed("pg_ctl");
            result.setError(e.getMessage());
            return false;
        }
    }


    /**
     * 尝试使用SQL重载配置
     */
    private boolean trySqlReload(ReloadResult result) {
        try {
            boolean success = databaseConnectionService.reloadPostGreSQLConfigViaSQL();
            result.setMethodUsed("SQL");
            if (success) {
                result.setOutput("pg_reload_conf() executed successfully");
                return true;
            } else {
                result.setOutput("pg_reload_conf() returned false or failed");
                return false;
            }
        } catch (Exception e) {
            log.warn("SQL reload failed: {}", e.getMessage(), e);
            result.setMethodUsed("SQL");
            result.setError(e.getMessage());
            return false;
        }
    }


    /**
     * 获取PostGreSQL数据目录（需要根据实际环境配置）
     */
    private String getPostgresDataDirectory() {
        // 这里应该从配置文件或环境变量获取
        return !StringUtils.isEmpty(pgDataPath) ? pgDataPath : System.getenv("PGDATA");
    }

    /**
     * 验证配置文件语法
     */
    public boolean validateConfigSyntax() {
        try {
            // 这里可以调用pg_hba.conf验证工具或自定义验证逻辑
            ProcessBuilder pb = new ProcessBuilder("pg_ctl", "check", "-D", getPostgresDataDirectory());
            Process process = pb.start();
            return process.waitFor() == 0;
        } catch (Exception e) {
            log.warn("Failed to validate config syntax: {}", e.getMessage());
            return false;
        }
    }


    /**
     * 检查应用是否有权限写入配置文件
     */
    public PermissionResult checkWritePermission(HttpServletRequest servletRequest) {
        long startTime = System.currentTimeMillis();
        String userName = ""; // 获取当前用户
        PermissionResult result = new PermissionResult();

        try {
            Path configPath = Paths.get(pgHbaConfigPath);
            Path parentDir = configPath.getParent();

            if (!Files.exists(parentDir)) {
                result.setHasPermission(false);
                result.setMessage("Parent directory does not exist: " + parentDir);
            } else {
                Path tempFile = Files.createTempFile(parentDir, "permission_test", ".tmp");
                Files.deleteIfExists(tempFile);
                result.setHasPermission(true);
                result.setMessage("Write permission granted");
                log.debug("Write permission check passed for directory: {}", parentDir);
            }

        } catch (Exception e) {
            result.setHasPermission(false);
            result.setMessage("Write permission check failed: " + e.getMessage());
            log.warn("Write permission check failed: {}", e.getMessage());
        } finally {
            long duration = System.currentTimeMillis() - startTime;
            // 记录操作日志
            configOperationLogService.logOperation("CHECK_PERMISSION", userName, result.isHasPermission() ? "SUCCESS" : "FAILED", result.getMessage(), result, duration, servletRequest);
        }
        return result;
    }

    /**
     * 获取配置文件状态信息
     */
    public ConfigStatus getConfigStatus() {
        ConfigStatus status = new ConfigStatus();
        status.setPath(pgHbaConfigPath); // Always set the configured path first
        try {
            Path configPathObject = Paths.get(pgHbaConfigPath);
            log.debug("Checking status for config file: {}", configPathObject.toAbsolutePath());
            // Check if the file itself exists
            boolean fileExists = Files.exists(configPathObject);
            status.setExists(fileExists);
            log.debug("File exists: {}", fileExists);
            if (fileExists) {
                // If file exists, get its properties
                status.setSize(Files.size(configPathObject));
                status.setLastModified(Files.getLastModifiedTime(configPathObject).toString());
                // Check if parent directory is writable (for modification)
                Path parentDir = configPathObject.getParent();
                if (parentDir != null && Files.exists(parentDir)) {
                    status.setWritable(Files.isWritable(parentDir));
                } else {
                    status.setWritable(false);
                    log.warn("Parent directory does not exist or is not accessible: {}", parentDir);
                }
            } else {
                // If file doesn't exist, check parent directory for writability
                status.setSize(0);
                status.setLastModified("N/A");
                Path parentDir = configPathObject.getParent();
                if (parentDir != null && Files.exists(parentDir)) {
                    status.setWritable(Files.isWritable(parentDir)); // Can we create the file here?
                    log.debug("Parent directory {} writable: {}", parentDir, status.isWritable());
                } else {
                    status.setWritable(false);
                    log.debug("Parent directory {} does not exist or is not accessible", parentDir);
                }
            }
        } catch (Exception e) {
            log.error("Unexpected error while getting config status for path {}: {}", pgHbaConfigPath, e.getMessage(), e);
            // In case of unexpected errors, set defaults indicating problem
            status.setExists(false);
            status.setWritable(false);
            status.setSize(0);
            status.setLastModified("Error: " + e.getMessage());
        }
        log.debug("Final config status: {}", status);
        return status;
    }


    public String readPgHbaConfigContent() throws IOException {
        Path configPath = Paths.get(pgHbaConfigPath);
        if (!Files.exists(configPath)) {
            throw new BusinessException("pg_hba.conf file not found: " + pgHbaConfigPath);
        }

        byte[] contentBytes = Files.readAllBytes(configPath);
        return new String(contentBytes, StandardCharsets.UTF_8);
    }

    /**
     * 更新pg_hba.conf文件内容
     */
    public UpdateConfigResult updatePgHbaConfigContent(String newContent, HttpServletRequest request) {
        long startTime = System.currentTimeMillis();
        String userName = "";
        UpdateConfigResult result = new UpdateConfigResult();

        try {
            Path configPath = Paths.get(pgHbaConfigPath);
            // 创建备份
            if (backupEnabled) {
                backupConfigFile();
            }

            // 写入新内容
            Path tempPath = Files.createTempFile("pg_hba", ".conf");
            try {
                Files.write(tempPath, newContent.getBytes(StandardCharsets.UTF_8));

                // 验证配置文件语法（可选）
                if (validateConfigSyntax(tempPath)) {
                    // 原子性地替换原文件
                    Files.move(tempPath, configPath, StandardCopyOption.REPLACE_EXISTING);
                    result.setSuccess(true);
                    result.setMessage("Configuration file updated successfully");
                    log.info("Successfully updated pg_hba.conf file");
                } else {
                    result.setSuccess(false);
                    result.setMessage("Configuration syntax validation failed");
                    log.warn("Configuration syntax validation failed");
                }
            } finally {
                // 清理临时文件
                Files.deleteIfExists(tempPath);
            }
        } catch (Exception e) {
            result.setSuccess(false);
            result.setMessage("Failed to update configuration file: " + e.getMessage());
            log.error("Failed to update pg_hba.conf file: {}", e.getMessage(), e);
        } finally {
            long duration = System.currentTimeMillis() - startTime;
            // 记录操作日志
            configOperationLogService.logOperation("EDIT_CONFIG", userName, result.isSuccess() ? "SUCCESS" : "FAILED", result.getMessage(), result, duration, request);
        }

        return result;
    }

    /**
     * 验证配置文件语法
     */
    private boolean validateConfigSyntax(Path configPath) {
        try {
            // 这里可以添加配置文件语法验证逻辑
            // 例如：检查基本格式、必需字段等
            List<String> lines = Files.readAllLines(configPath, StandardCharsets.UTF_8);

            // 简单验证：检查是否有内容
            boolean hasContent = lines.stream().map(String::trim).anyMatch(line -> !line.isEmpty() && !line.startsWith("#"));
            return hasContent;
        } catch (Exception e) {
            log.error("Configuration syntax validation failed: {}", e.getMessage());
            return false;
        }
    }


}
